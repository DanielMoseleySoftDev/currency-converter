{"version":3,"sources":["CurrencyRow.js","StorageTable.js","App.js","index.js"],"names":["CurrencyRow","props","currencyOptions","selectedCurrency","onChangeCurrency","onChangeAmount","amount","type","className","value","onChange","map","currency","key","StorageTable","storage","TableContainer","component","Paper","Table","size","TableHead","TableRow","TableCell","align","TableBody","conversion","index","id","time","fromAmount","fromCurrency","toAmount","toCurrency","BASE_URL","App","useState","setcurrencyOptions","setFromCurrency","setToCurrency","exchangeRate","setExchangeRate","setAmount","amountInFromCurrency","setAmountInFromCurrency","setStorage","tableIsEmpty","setTableIsEmpty","toFixed","useEffect","fetch","then","res","json","data","defaultFromCurrency","Object","keys","rates","filter","name","defaultToCurrency","base","e","target","Button","onClick","today","Date","newConversion","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","prevStorage","variant","disableElevation","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39ff7df2.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function CurrencyRow(props) {\n\n  const {\n    currencyOptions,\n    selectedCurrency,\n    onChangeCurrency,\n    onChangeAmount,\n    amount\n  } = props;\n\n  return (\n    <div>\n      <input type=\"number\" className=\"input\" value={amount} onChange={onChangeAmount}></input>\n      <select value={selectedCurrency} onChange={onChangeCurrency}>\n        {currencyOptions.map((currency) => (\n          <option key={currency} value={currency}>{currency}</option>\n        ))}\n      </select>\n    </div>\n  )\n}\n","import React from \"react\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nexport default function StorageTable(props) {\n\n  const {\n    storage\n  } = props;\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className=\"table\" size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Time</TableCell>\n            <TableCell align=\"right\">From</TableCell>\n            <TableCell align=\"right\">To</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {storage.map((conversion, index) => (\n            <TableRow key={index} id={index}>\n              <TableCell>{conversion.time}</TableCell>\n              <TableCell align=\"right\">{conversion.fromAmount + \" \" + conversion.fromCurrency}</TableCell>\n              <TableCell align=\"right\">{conversion.toAmount + \" \" + conversion.toCurrency}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport CurrencyRow from \"./CurrencyRow\";\nimport StorageTable from \"./StorageTable\";\n\nconst BASE_URL = \"https://api.exchangeratesapi.io/latest\"\n\nfunction App() {\n  //Set States\n  const [currencyOptions, setcurrencyOptions] = useState([]);\n  const [fromCurrency, setFromCurrency] = useState();\n  const [toCurrency, setToCurrency] = useState();\n  const [exchangeRate, setExchangeRate] = useState(0);\n  const [amount, setAmount] = useState(1);\n  const [amountInFromCurrency, setAmountInFromCurrency] = useState(true);\n  const [storage, setStorage] = useState([])\n  const [tableIsEmpty, setTableIsEmpty] = useState(true);\n\n  //\n  let toAmount, fromAmount\n  if (amountInFromCurrency) {\n    fromAmount = amount\n    toAmount = (amount * exchangeRate).toFixed(2)\n  } else {\n    toAmount = amount\n    fromAmount = (amount / exchangeRate).toFixed(2)\n  }\n\n  useEffect(() => {\n    fetch(BASE_URL)\n      .then(res => res.json())\n      .then(data => {\n        const defaultFromCurrency = Object.keys(data.rates).filter(name => name === \"GBP\")\n        const defaultToCurrency = Object.keys(data.rates).filter(name => name === \"KRW\")\n        setcurrencyOptions([data.base, ...Object.keys(data.rates)])\n        setFromCurrency(defaultFromCurrency)\n        setToCurrency(defaultToCurrency);\n        setExchangeRate(data.rates[defaultToCurrency]);\n      })\n  }, []);\n\n  useEffect(() => {\n    if(fromCurrency != null && toCurrency != null) {\n      fetch(`${BASE_URL}?base=${fromCurrency}&symbols=${toCurrency}`)\n        .then(res => res.json())\n        .then(data => setExchangeRate(data.rates[toCurrency]))\n      }\n    }, [fromCurrency, toCurrency])\n\n\n  function handleFromAmountChange(e) {\n    setAmount(e.target.value)\n    setAmountInFromCurrency(true);\n  }\n\n  function handleToAmountChange(e) {\n    setAmount(e.target.value)\n    setAmountInFromCurrency(false);\n  }\n\n  function addToStorage() {\n    setTableIsEmpty(false)\n    const today = new Date();\n    const date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\n    const time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n    const dateTime = date+' '+time;\n\n    const newConversion = {\n      time: dateTime,\n      toCurrency: toCurrency,\n      fromCurrency: fromCurrency,\n      toAmount: toAmount,\n      fromAmount: fromAmount\n    }\n    setStorage(prevStorage => {\n      return [...prevStorage, newConversion]\n    });\n  }\n\n\n  return (\n    <div className=\"App\">\n      <h1>Currency Converter</h1>\n      <CurrencyRow\n        currencyOptions={currencyOptions}\n        selectedCurrency={fromCurrency}\n        onChangeCurrency={e => setFromCurrency(e.target.value)}\n        onChangeAmount={handleFromAmountChange}\n        amount={fromAmount}\n      />\n      <div className=\"equals\">=</div>\n      <CurrencyRow\n        currencyOptions={currencyOptions}\n        selectedCurrency={toCurrency}\n        onChangeCurrency={e => setToCurrency(e.target.value)}\n        onChangeAmount={handleToAmountChange}\n        amount={toAmount}\n      />\n      <div className=\"storeButton\">\n        <Button onClick={addToStorage} variant=\"contained\" disableElevation>Store</Button>\n      </div>\n      {!tableIsEmpty && <StorageTable\n        storage={storage}\n        />\n      }\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}